//link: https://leetcode.com/problems/row-with-maximum-ones/description/
class Solution {
public:
   int check(vector<int> &a)
   {
    
    int low = 0;
    int high = a.size() - 1;
    int x = 1;
    int ans = a.size(); 

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (a[mid] >=x) {
            ans = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }

    return ans;
   
    
   } 
      vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {
       int n = mat.size();
         int m = mat.empty() ? 0 : mat[0].size();
         int count=-1;
         int index=-1;
        for(int i=0;i<n;i++)
        {
            sort(mat[i].begin(), mat[i].end());  
            int t=m-check(mat[i]);
            cout<<t<<endl;
            if(t>count)
            {
                count=t;
                index=i;
            }
        }
        vector<int> sol={index,count};
        return sol;
        
    }
};
